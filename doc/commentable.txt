*commentable.txt*     Commentable - block comment formatter     *commentable*

                            COMMENTABLE MANUAL
                              VERSION: 0.3.1

1. About Commentable                              |commentable-about|
   1.1 Requirements                               |commentable-requirements|
2. Quick Start                                    |commentable-quickstart|
3. Commands and Mappings                          |commentable-exposed|
   3.1 Commands                                   |commentable-commands|
   3.2 Mappings                                   |commentable-mappings|
4. Configuration                                  |commentable-configuration|
   4.1 Comment Style                              |commentable-style|
   4.2 Comment Width                              |commentable-width|
   4.3 Comment Paragraphs                         |commentable-paragraphs|

============================================================================
1. ABOUT COMMENTABLE ~
                                                          *commentable-about*

Commentable provides expanded comment block handling for Vim, specifically
for comments with "walls" - right-aligned closing boundaries and marker
lines above and below the block. It has many different configuration
variables, allowing you to set the block generation and formatting to your
preferred style for each filetype or project.

Commentable's homepage is its github repository:
https://www.github.com/FalacerSelene/vim-commentable.git

1.1 REQUIREMENTS                                   *commentable-requirements*
----------------

Commentable requires Vim version 7.4 or later, and only loads if the
'compatible' option is not set. It does not require Vim to be compiled with
any particular plugin language support.

============================================================================
2. QUICK START ~
                                                     *commentable-quickstart*

To get started right away, add >
    :CommentableSetDefaultStyle
to your .vimrc, and then use `:CommentableCreate` and `:CommentableReformat`
to create and reformat comments.

You can also add >
    :CommentableSetDefaultBindings
and then use `gcc` and `gcq` instead.

============================================================================
3. COMMANDS AND MAPPINGS ~
                                                        *commentable-exposed*

3.1 COMMANDS                                           *commentable-commands*
------------

:CommentableCreate                                       *:CommentableCreate*

Create a new comment block from the text comprising the lines given in the
command range. If no range is given, create a block from the current line.

:CommentableReformat                                   *:CommentableReformat*

Reformat the comment block located on the line given by the command address.
If a range is given, then reformat every block located within the range.

:CommentableSetDefaultBindings               *:CommentableSetDefaultBindings*

Set some default binding for the previous commands. This is equivalent to: >
      :nmap gcc <Plug>(CommentableCreate)
      :nmap gcq <Plug>(CommentableReformat)

:CommentableSetDefaultStyle                     *:CommentableSetDefaultStyle*

Set some default block styles. This sets the default style to ['#', '', ''],
and sets a specific style for: >
    - python
    - perl
    - sh
    - c
    - cpp
    - java
    - scheme
    - vim
    - make

3.2 MAPPINGS                                           *commentable-mappings*
------------

Commentable does not provide any default mappings - it doesn't want to wreck
your carefully crafted custom shortcuts. It does, however, provide a set of
<Plug> mappings which call equivalents from the |commentable-commands|
sections, and also integrates with Tim Pope's |vim-repeat| plugin, setting the
'.' key to repeat the mapped-to action.

The mappings are defined in `Normal-mode`, `Visual-mode`, and `Select-mode`.
In Normal mode they call the corresponding command on the current line; in
Visual and Select mode they call the command with the current selection as
the range.

In order to use these mappings you will need to map something on to them in
your `vimrc` file. An example of how you might do this is: >
      :nmap ,c <Plug>(CommentableReformat)
      :vmap ,c <Plug>(CommentableReformat)
      :nmap ,C <Plug>(CommentableCreate)
      :vmap ,C <Plug>(CommentableCreate)
In order for this to work the standard `:map` set of commands must be used
rather then usually preferred `:noremap` set.

<Plug>(CommentableCreate)                         *<Plug>(CommentableCreate)*
                        Carries out the same action as
                        |:CommentableCreate| - i.e. creates a new block
                        comment with the current line as its contents. Also
                        sets the '`.`' key to repeat this if |vim-repeat| is
                        installed.

<Plug>(CommentableReformat)                     *<Plug>(CommentableReformat)*
                        Carries out the same action as
                        |:CommentableReformat| - i.e. reformats the block
                        under the cursor according to the current
                        configuration. Also sets the '`.`' key to repeat this
                        if |vim-repeat| is installed.

============================================================================
4. CONFIGURATION ~
                                                  *commentable-configuration*

Commentable exposes configuration via variables in the namespace
`Commentableâ€¥`. All variables are read from the `b:` scope first, and if they
are not present then from the `g:` scope. This allows the global variable to
be overwritten on a per-file basis.

4.1 COMMENT STYLE                                         *commentable-style*
-----------------
                                                      *CommentableBlockStyle*
                                                        *CommentableSubStyle*

Comment style is controlled by the two variables >
    CommentableBlockStyle
    CommentableSubStyle

The two variables are functionally the same, except that `SubStyle`, if
present, overrides `BlockStyle` for indented comment blocks. This allows
top-level blocks to have a visually distinct style from indented blocks.

If set, these variables must be:

- A list.
- 3 or 4 items long.
- The first item must be a string or a list of 2 strings.
- The subsequent items must be strings.
- The first item must contain no leading whitespace.
- The third item must contain no trailing whitespace.

The meaning of this list follows 1 of 4 patterns depending on the form:

- [initial, medial, terminal]
- [[init_default, init_pattern], medial, terminal]
- [initial, medial, terminal, spacer]
- [[init_default, init_pattern], medial, terminal, spacer]

>
   inital
    ||                      medial
    || /----------------------------------------------\
    ||/                                                \
    /****************************************************/
    /* Text                                             */
    /*|**************************************************/
      |                                                 ||
    spacer                                            terminal

The `initial` and `terminal` are strings which are used at the left and right
sides of comment blocks respectively. The `medial` is a string which is
repeated in order to make up the 'walls' of the block. The `spacer` is a
string inserted before starting each line of text - if left out of the style
it will be a single space.

The `terminal` and `medial` may be the null string, in which case the
comment block will not be closed on the right/will not have walls.

4.2 COMMENT WIDTH                                         *commentable-width*
-----------------
                                                      *CommentableBlockWidth*
                                                     *CommentableBlockColumn*
                                                        *CommentableSubWidth*
                                                       *CommentableSubColumn*

The size of comment blocks is controlled by the four variables >
    CommentableBlockWidth
    CommentableBlockColumn
    CommentableSubWidth
    CommentableSubColumn

As for the style, these two pairs are the same, but `Sub...`, if defined, will
overwrite `Block...` for indented comments.

These variables must be a positive integer. If they are set, then the `Width`
variables determine the total span of the comment blocks, from start of the
`initial` to end of the `terminal`, and the `Column` determines the
right-most colums of the comment block. In case both are defined, then the
most restrictive applies.

4.3 COMMENT PARAGRAPHS                               *commentable-paragraphs*
----------------------
                                                  *CommentableParagraphIntro*

For longer comment blocks, you might want to write multiple paragraphs within
the block. An example is for file intro blocks or class descriptions. By
default, commentable will use the value of 'formatlistpat' to determine how
to format the paragraphs within a comment block. A new line which matches the
'formatlistpat' is considered to start a new paragraph, and will be
maintained separately when reformatting the block.

Alternatively, and for greater control, you can set the variable
`CommentableParagraphIntro`. This should be a list of patterns, where each
pattern is checked in turn to determine if a line begins a new paragraph.


" vim: set expandtab sts=2 ts=2 sw=2 tw=77 cc=78 ft=help norl:
